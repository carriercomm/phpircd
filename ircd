#!/usr/bin/php -q
<?php

require("classes/core.class.php");
require("classes/ircd.class.php");
require("classes/user.class.php");
require("classes/channel.class.php");
$ircd = new ircd();
$ircd->init('config.ini');
$ircd->debug("listening for new clients");
while(true){
    $un = NULL;
    //read-loop for new connections
    $reads = $ircd->_sockets;
    $writes = $reads;
    if(socket_select($reads, $writes, $un, 0) > 0){
    
    foreach($ircd->_sockets as $socket){
      while(in_array($socket, $reads)){
        if(count($ircd->_clients) >= $ircd->config['ircd']['maxusers']){
            $new = @socket_accept($socket);
            $ircd->write($new, "ERROR: Maximum clients reached. Please use a different server.");
            $ircd->quit($new,'Error: Server Full');
            continue;
        }
        $new = @socket_accept($socket);
        socket_set_nonblock($new);
        $client = new User($new);
        $ircd->write($new, ":".$ircd->config['me']['servername']." NOTICE AUTH :*** Looking up your hostname...");
        $ircd->debug("new client: {$client->ip}");
        $hn = gethostbyaddr($client->ip);
        if($hn == $client->ip){
            $client->address = $client->ip;
            $ircd->write($new, ":".$ircd->config['me']['servername']." NOTICE AUTH :*** Can't resolve your hotsname, using your IP instead.");
        } else {
            $client->address = $hn;
            $ircd->write($new, ":".$ircd->servname." NOTICE AUTH :*** Found your hostname.");
        }
        $client->id = $ircd->client_num++;
        $ircd->_clients[$client->id] = $client;
        unset($reads[array_search($socket, $reads)]);
      }
    }
    }
    $reads = array();
    foreach($ircd->_clients as $i => $c)
        $reads[$i] = $c->socket;
    if(@socket_select($reads, $writes, $un, 0) > 0){
      foreach($reads as $key => $value){
        if(false !== ($buf = $ircd->read($value))){
            $data = trim($buf);
            if($data!==false){
                $user = $ircd->_clients[$key];
                if(strpos($data, "\n") >= 0 || strpos($data, "\r") >= 0){
                    $data = str_replace("\r","\n", $data);
                    $exp = explode("\n", $data);
                    $data = array();
                    foreach($exp as $d){
                        $d = trim($d);
                        if(!empty($d)){
                            $data[] = $d;
                        }
                    }
                }
                foreach($data as $work){
                    if($user->registered == TRUE){
                        $ircd->process($work, $user);
                    } else {
                        $ircd->newConnection($work, $user);
                    }
                }
            } else {
                $ircd->debug("Closing Link: client ".(empty($user->prefix)?$user->address:$user->prefix).": Client Exited");
                unset($reads[$key]);
                $ircd->quit($user, 'Client Exited');
            }
        } else {
            $ircd->debug("Closing Link: client {$user->prefix}: ".socket_strerror(socket_last_error($value)));
            unset($reads[$key]);
            $ircd->quit($user, socket_strerror(socket_last_error($value)));
        }
    }//end while
    }//end if socket_select
    //do this every iteration regardless of socket state
    foreach($ircd->_clients as $id => $user){
        if((time() - $user->lastpong) > $ircd->config['ircd']['pingfreq']){
            if(!$user->registered){
                $ircd->write($user->socket,"ERROR: Closing link: ".$user->prefix." (Ping timeout)");
                $ircd->debug("Closing Link: client {$user->prefix} (Ping Timeout)");
                $ircd->quit($user, 'Ping Timeout');
            } else {
                if($user->lastping <= $user->lastpong){
                    $ircd->ping($user->socket, $ircd->servname, TRUE);
                    $user->lastping = time();
                }
            }
        }
        if(time() > ($user->lastpong + $ircd->config['ircd']['pingfreq'] + $ircd->config['ircd']['pingout'])){
            $ircd->write($user->socket,"ERROR: Closing link: ".$user->prefix." (Ping timeout)");
            $ircd->debug("Closing Link: client {$user->address} (Ping Timeout)");
            $ircd->quit($user);
        }
    }
        usleep(700);
}
foreach($ircd->_sockets as $socket)
    socket_close($socket, true);
?>
