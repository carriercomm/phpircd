#!/usr/bin/php -q
<?php
require("classes/ircd.class.php");
require("classes/user.class.php");
require("classes/channel.class.php");
$ircd = new ircd('config.ini');
while(true){
    //select-loop for server AND client sockets
    $reads = $writes = $ircd->_sockets;
    foreach($ircd->_clients as $i => $c)
        $reads[] = $writes[] = $c->socket;
    if(@socket_select($reads, $writes, $un=null, 0) > 0){
      //read-loop
      foreach($reads as $key => $value){
        //accept new
        if(array_search($value, $ircd->_sockets) !== FALSE){
            $ircd->accept($value); 
            unset($reads[$key]);
            continue;
        }
        //process user
        if(false !== ($buf = $ircd->read($value))){
            if(!empty($buf)){
                $data = trim($buf);
                $user = $ircd->getUserBySocket($value);
                $data = explode("\n", str_replace("\r","\n", $data));
                foreach($data as $d){
                    $d = trim($d);
                    if(!empty($d))
                        if($user->registered === TRUE)
                            $ircd->process($d, $user);
                        else
                            $ircd->newConnection($d, $user);
                }
                unset($reads[$key]);
            } else {
                $ircd->debug("Closing Link: client ".(empty($user->prefix)?$user->address:$user->prefix).": Client Exited");
                unset($reads[$key]);
                $ircd->quit($user, 'Client Exited');
            }
        } else {
            $ircd->debug("Closing Link: client {$user->prefix}: ".socket_strerror(socket_last_error($value)));
            unset($reads[$key]);
            $ircd->quit($user, socket_strerror(socket_last_error($value)));
        }
      }//end read-loop
      
      //write-loop
      $pending = $ircd->getPendingWrites();
      foreach($pending as $user){
        if(in_array($user->socket, $writes)){
            $user->writeBuffer();
        }
      }
    }//end if socket_select
    //do this every iteration regardless of socket state
    foreach($ircd->_clients as $id => $user){
        $now = time();
        if(($now - $user->lastpong) > $ircd->config['ircd']['pingfreq']){
            if(!$user->registered){
                $ircd->write($user->socket,"ERROR: Closing link: ".$user->prefix." (Ping timeout)");
                $ircd->debug("Closing Link: client {$user->prefix} (Ping Timeout)");
                $ircd->quit($user, 'Ping Timeout');
            } else {
                if($user->lastping <= $user->lastpong){
                    $ircd->ping($user, $ircd->servname, TRUE);
                    $user->lastping = $now;
                }
            }
        }
        if($now > ($user->lastpong + $ircd->config['ircd']['pingfreq'] + $ircd->config['ircd']['pingout'])){
            $ircd->debug("Closing Link: client {$user->address} (Ping Timeout)");
            $ircd->quit($user, 'Ping Timeout');
        }
    }
        usleep(250);
}
?>
